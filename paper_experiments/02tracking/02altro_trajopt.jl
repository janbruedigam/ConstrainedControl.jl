using TrajectoryOptimization
using RobotDynamics
using StaticArrays, LinearAlgebra

struct TripleCartpole{T} <: AbstractModel
    function TripleCartpole()
        new{Float64}()
    end
end


# Dynamics from symbolic calculation
function RobotDynamics.dynamics(model::TripleCartpole{T}, x, u) where T
    g = -9.81
    F = [u[1];0;0;0]

    q1 = x[1]
    q2 = x[2]
    q3 = x[3]
    q4 = x[4]
    v1 = x[5]
    v2 = x[6]
    v3 = x[7]
    v4 = x[8]
    invM11 = (-1.0*(-1.0*(-1.0*cos(q4) - 1.66666666666667)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) - 1.0*(-0.25*(-cos(q4) - 0.666666666666667)^2 + 0.333333333333333*cos(q4) + 0.555555555555556)*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0) + 1.0*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667)*(-1.0*(-0.5*cos(q4) - 0.333333333333333)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*cos(q3) + 0.333333333333333*cos(q4) + 0.166666666666667*cos(q3 + q4) + 0.555555555555556))/((-1.0*(-1.0*cos(q4) - 1.66666666666667)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-2.5*cos(q2) - 1.5*cos(q2 + 
    q3) - 0.5*cos(q2 + q3 + q4))*cos(q2 + q3 + q4) + 1.75*cos(q4) + 1.75*cos(q3 + q4) + 1.16666666666667) - (0.5*(-1.0*cos(q4) - 1.66666666666667)*cos(q2 + q3 + q4) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)))*(1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + 
    q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0)*cos(q2 + q3 + q4)) + (1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667)*cos(q2 + q3 + q4))^2 + (-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0) + 1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-0.5*cos(q4) - 0.333333333333333)*cos(q2 + q3 + q4) + 0.5*cos(q2 + q3) + 0.166666666666667*cos(q2 + q3 + q4)) + (-0.25*(-cos(q4) - 0.666666666666667)^2 + 0.333333333333333*cos(q4) + 0.555555555555556)*(-6.25*(-cos(q2) - 0.6*cos(q2 + q3) - 0.2*cos(q2 + q3 + q4))^2 + 10.5*cos(q3) + 3.5*cos(q4) + 3.5*cos(q3 + q4) + 14.0) - (-1.0*(-0.5*cos(q4) - 0.333333333333333)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*cos(q3) + 0.333333333333333*cos(q4) + 0.166666666666667*cos(q3 + q4) + 0.555555555555556)*(-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)) + 5.25*cos(q3) + 3.5*cos(q4) + 1.75*cos(q3 + q4) + 5.83333333333333))
    
    invM12 = (-0.5*(-1.0*(-1.0*cos(q4) - 1.66666666666667)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*cos(q2 + q3 + q4) - 1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-1.0*(-0.5*cos(q4) - 0.333333333333333)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*cos(q3) + 0.333333333333333*cos(q4) + 0.166666666666667*cos(q3 + q4) + 0.555555555555556) + 1.0*(-0.25*(-cos(q4) - 0.666666666666667)^2 + 0.333333333333333*cos(q4) + 0.555555555555556)*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)))/((-1.0*(-1.0*cos(q4) - 1.66666666666667)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*cos(q2 + q3 + q4) + 1.75*cos(q4) + 1.75*cos(q3 + q4) + 1.16666666666667) - (0.5*(-1.0*cos(q4) - 1.66666666666667)*cos(q2 + q3 + q4) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)))*(1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0)*cos(q2 + q3 + q4)) + (1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667)*cos(q2 + q3 + q4))^2 + (-1.0*(-1.5*cos(q2 + 
    q3) - 0.5*cos(q2 + q3 + q4))*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0) + 1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-0.5*cos(q4) - 0.333333333333333)*cos(q2 + q3 + q4) + 0.5*cos(q2 + q3) + 0.166666666666667*cos(q2 + q3 + q4)) + (-0.25*(-cos(q4) - 0.666666666666667)^2 + 0.333333333333333*cos(q4) + 0.555555555555556)*(-6.25*(-cos(q2) - 0.6*cos(q2 + q3) - 0.2*cos(q2 + q3 + q4))^2 + 10.5*cos(q3) + 3.5*cos(q4) + 3.5*cos(q3 + q4) + 14.0) - (-1.0*(-0.5*cos(q4) - 0.333333333333333)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*cos(q3) + 0.333333333333333*cos(q4) + 0.166666666666667*cos(q3 + q4) + 0.555555555555556)*(-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)) + 5.25*cos(q3) + 3.5*cos(q4) + 1.75*cos(q3 + q4) + 5.83333333333333)) 
    
    invM13 = (-1.0*(1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667)*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 1.0*(1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0)*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.333333333333333) - 0.333333333333333*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0) 
    + 0.333333333333333*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))/((-1.0*(-1.0*cos(q4) - 1.66666666666667)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*cos(q2 + q3 + q4) + 1.75*cos(q4) + 1.75*cos(q3 + q4) + 1.16666666666667) - (0.5*(-1.0*cos(q4) - 1.66666666666667)*cos(q2 + q3 + q4) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)))*(1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0)*cos(q2 + q3 + q4)) + (1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667)*cos(q2 + q3 + q4))^2 + (-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0) + 1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-0.5*cos(q4) - 0.333333333333333)*cos(q2 + q3 + q4) + 0.5*cos(q2 + q3) + 0.166666666666667*cos(q2 + q3 + q4)) + (-0.25*(-cos(q4) - 0.666666666666667)^2 + 0.333333333333333*cos(q4) + 0.555555555555556)*(-6.25*(-cos(q2) - 0.6*cos(q2 + q3) - 0.2*cos(q2 + q3 
    + q4))^2 + 10.5*cos(q3) + 3.5*cos(q4) + 3.5*cos(q3 + q4) + 14.0) - (-1.0*(-0.5*cos(q4) - 0.333333333333333)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*cos(q3) + 0.333333333333333*cos(q4) + 0.166666666666667*cos(q3 + q4) + 0.555555555555556)*(-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)) + 5.25*cos(q3) + 3.5*cos(q4) + 1.75*cos(q3 + q4) + 5.83333333333333))
    
    invM14 = (1.0*(1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667)*cos(q2 + q3 + q4))*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667) + 1.0*(-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0) + 1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(-0.5*cos(q4) - 0.333333333333333) - 1.0*(1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0)*cos(q2 + q3 + q4))*(-1.0*cos(q4) - 1.66666666666667))/((-1.0*(-1.0*cos(q4) - 1.66666666666667)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*cos(q2 + q3 + q4) + 1.75*cos(q4) + 1.75*cos(q3 + q4) + 1.16666666666667) - (0.5*(-1.0*cos(q4) - 1.66666666666667)*cos(q2 + q3 + q4) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)))*(1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0)*cos(q2 + q3 + q4)) + (1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667)*cos(q2 + q3 + q4))^2 + (-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0) + 1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-0.5*cos(q4) - 0.333333333333333)*cos(q2 + q3 + q4) + 0.5*cos(q2 + q3) + 0.166666666666667*cos(q2 + q3 + q4)) + (-0.25*(-cos(q4) - 0.666666666666667)^2 + 0.333333333333333*cos(q4) + 0.555555555555556)*(-6.25*(-cos(q2) - 0.6*cos(q2 + q3) - 0.2*cos(q2 + q3 + q4))^2 + 10.5*cos(q3) + 3.5*cos(q4) + 3.5*cos(q3 + q4) + 14.0) - (-1.0*(-0.5*cos(q4) - 0.333333333333333)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*cos(q3) + 0.333333333333333*cos(q4) + 0.166666666666667*cos(q3 + q4) + 0.555555555555556)*(-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)) + 5.25*cos(q3) + 3.5*cos(q4) + 1.75*cos(q3 + q4) + 5.83333333333333))
    
    invM21 = invM12
    
    invM22 = (0.5*(0.5*(-1.0*cos(q4) - 1.66666666666667)*cos(q2 + q3 + q4) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)))*cos(q2 + q3 + q4) - 0.875*(-cos(q4) - 0.666666666666667)^2 + 1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(0.5*(-0.5*cos(q4) - 0.333333333333333)*cos(q2 + q3 + q4) + 0.5*cos(q2 + q3) + 0.166666666666667*cos(q2 + q3 + q4)) + 1.16666666666667*cos(q4) + 1.94444444444444)/((-1.0*(-1.0*cos(q4) - 1.66666666666667)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*cos(q2 + q3 + q4) + 1.75*cos(q4) + 1.75*cos(q3 + q4) + 1.16666666666667) - (0.5*(-1.0*cos(q4) - 1.66666666666667)*cos(q2 + q3 + q4) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)))*(1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0)*cos(q2 + q3 + q4)) + (1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667)*cos(q2 + q3 + q4))^2 + (-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0) + 1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-0.5*cos(q4) - 0.333333333333333)*cos(q2 + q3 + q4) + 0.5*cos(q2 + q3) + 0.166666666666667*cos(q2 + q3 + q4)) + (-0.25*(-cos(q4) - 0.666666666666667)^2 + 0.333333333333333*cos(q4) + 0.555555555555556)*(-6.25*(-cos(q2) - 0.6*cos(q2 + q3) - 0.2*cos(q2 + q3 + q4))^2 + 10.5*cos(q3) + 3.5*cos(q4) + 3.5*cos(q3 + q4) + 14.0) - (-1.0*(-0.5*cos(q4) - 0.333333333333333)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*cos(q3) + 0.333333333333333*cos(q4) + 0.166666666666667*cos(q3 + q4) + 0.555555555555556)*(-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)) + 5.25*cos(q3) + 3.5*cos(q4) + 1.75*cos(q3 + q4) + 5.83333333333333))
    
    invM23 = (-0.5*(1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667)*cos(q2 + q3 + q4))*cos(q2 + q3 + q4) - 1.0*(-0.5*cos(q4) - 0.333333333333333)*(0.5*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*cos(q2 + q3 + q4) + 1.75*cos(q4) + 1.75*cos(q3 + q4) + 1.16666666666667) + 0.333333333333333*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)) - 1.75*cos(q3) - 1.16666666666667*cos(q4) - 0.583333333333333*cos(q3 + q4) - 1.94444444444444)/((-1.0*(-1.0*cos(q4) - 1.66666666666667)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*cos(q2 + q3 + q4) + 1.75*cos(q4) + 
    1.75*cos(q3 + q4) + 1.16666666666667) - (0.5*(-1.0*cos(q4) - 1.66666666666667)*cos(q2 + q3 + q4) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)))*(1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0)*cos(q2 + q3 + q4)) + (1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667)*cos(q2 + q3 + q4))^2 + (-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0) + 1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-0.5*cos(q4) - 0.333333333333333)*cos(q2 + q3 + q4) + 0.5*cos(q2 + q3) + 0.166666666666667*cos(q2 + q3 + q4)) + (-0.25*(-cos(q4) - 0.666666666666667)^2 + 0.333333333333333*cos(q4) + 0.555555555555556)*(-6.25*(-cos(q2) - 0.6*cos(q2 + q3) - 0.2*cos(q2 + q3 + q4))^2 + 10.5*cos(q3) + 3.5*cos(q4) + 3.5*cos(q3 + q4) + 14.0) - (-1.0*(-0.5*cos(q4) - 0.333333333333333)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 
    0.333333333333333) + 0.5*cos(q3) + 0.333333333333333*cos(q4) + 0.166666666666667*cos(q3 + q4) + 0.555555555555556)*(-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)) + 5.25*cos(q3) + 3.5*cos(q4) + 1.75*cos(q3 + q4) + 5.83333333333333))
    
    invM24 = (-1.0*(1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667)*cos(q2 + q3 + q4))*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)) + 1.0*(-1.0*cos(q4) - 1.66666666666667)*(0.5*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*cos(q2 + q3 + q4) + 1.75*cos(q4) + 1.75*cos(q3 + q4) + 1.16666666666667) - 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)) + 5.25*cos(q3) + 3.5*cos(q4) + 1.75*cos(q3 + q4) + 5.83333333333333))/((-1.0*(-1.0*cos(q4) - 1.66666666666667)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*cos(q2 + q3 + q4) + 1.75*cos(q4) + 1.75*cos(q3 + q4) + 1.16666666666667) - (0.5*(-1.0*cos(q4) - 1.66666666666667)*cos(q2 + q3 + q4) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)))*(1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0)*cos(q2 + q3 + q4)) + (1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667)*cos(q2 + q3 + q4))^2 + (-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0) + 1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-0.5*cos(q4) - 0.333333333333333)*cos(q2 + q3 + q4) + 0.5*cos(q2 + q3) + 0.166666666666667*cos(q2 + q3 + q4)) + (-0.25*(-cos(q4) - 0.666666666666667)^2 + 0.333333333333333*cos(q4) + 0.555555555555556)*(-6.25*(-cos(q2) - 0.6*cos(q2 + q3) - 0.2*cos(q2 + q3 + q4))^2 + 10.5*cos(q3) + 3.5*cos(q4) + 3.5*cos(q3 + q4) + 14.0) - (-1.0*(-0.5*cos(q4) - 0.333333333333333)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*cos(q3) + 0.333333333333333*cos(q4) + 0.166666666666667*cos(q3 + q4) + 0.555555555555556)*(-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)) + 5.25*cos(q3) + 3.5*cos(q4) + 1.75*cos(q3 + q4) + 5.83333333333333))
    
    invM31 = invM13
    
    invM32 = invM23
    
    invM33 = (0.5*(1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0)*cos(q2 + q3 + q4))*cos(q2 + q3 + q4) - 2.08333333333333*(-cos(q2) - 0.6*cos(q2 + q3) - 0.2*cos(q2 + q3 + q4))^2 + 1.0*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333)*(0.5*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*cos(q2 + q3 + q4) + 1.75*cos(q4) + 1.75*cos(q3 + q4) + 1.16666666666667) + 3.5*cos(q3) + 1.16666666666667*cos(q4) + 1.16666666666667*cos(q3 + q4) + 4.66666666666667)/((-1.0*(-1.0*cos(q4) - 1.66666666666667)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*cos(q2 + q3 + q4) + 1.75*cos(q4) + 1.75*cos(q3 + q4) + 1.16666666666667) - (0.5*(-1.0*cos(q4) - 1.66666666666667)*cos(q2 + q3 + q4) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)))*(1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0)*cos(q2 + q3 + q4)) + (1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667)*cos(q2 + q3 + q4))^2 + (-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0) + 1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-0.5*cos(q4) - 0.333333333333333)*cos(q2 + q3 + q4) + 0.5*cos(q2 + q3) + 0.166666666666667*cos(q2 + q3 + q4)) + (-0.25*(-cos(q4) - 0.666666666666667)^2 + 0.333333333333333*cos(q4) + 0.555555555555556)*(-6.25*(-cos(q2) - 0.6*cos(q2 + q3) - 0.2*cos(q2 + q3 + q4))^2 + 10.5*cos(q3) + 3.5*cos(q4) + 3.5*cos(q3 + q4) + 14.0) - (-1.0*(-0.5*cos(q4) - 0.333333333333333)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*cos(q3) + 0.333333333333333*cos(q4) + 0.166666666666667*cos(q3 + q4) + 0.555555555555556)*(-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)) + 5.25*cos(q3) + 3.5*cos(q4) + 1.75*cos(q3 + q4) + 5.83333333333333))
    
    invM34 = (1.0*(1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0)*cos(q2 + q3 + q4))*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-6.25*(-cos(q2) - 
    0.6*cos(q2 + q3) - 0.2*cos(q2 + q3 + q4))^2 + 10.5*cos(q3) + 3.5*cos(q4) + 3.5*cos(q3 + q4) + 14.0) - 1.0*(0.5*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*cos(q2 + q3 + q4) + 1.75*cos(q4) + 1.75*cos(q3 + q4) + 1.16666666666667)*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))/((-1.0*(-1.0*cos(q4) - 1.66666666666667)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*cos(q2 + q3 + q4) + 1.75*cos(q4) 
    + 1.75*cos(q3 + q4) + 1.16666666666667) - (0.5*(-1.0*cos(q4) - 1.66666666666667)*cos(q2 + q3 + q4) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)))*(1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0)*cos(q2 + q3 + q4)) + (1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667)*cos(q2 + q3 + q4))^2 + (-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0) + 1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-0.5*cos(q4) - 0.333333333333333)*cos(q2 + q3 + q4) + 0.5*cos(q2 + q3) + 0.166666666666667*cos(q2 + q3 + q4)) + (-0.25*(-cos(q4) - 0.666666666666667)^2 + 0.333333333333333*cos(q4) + 0.555555555555556)*(-6.25*(-cos(q2) - 0.6*cos(q2 + q3) - 0.2*cos(q2 + q3 + q4))^2 + 10.5*cos(q3) + 3.5*cos(q4) + 3.5*cos(q3 + q4) + 14.0) - (-1.0*(-0.5*cos(q4) - 0.333333333333333)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) 
    - 0.333333333333333) + 0.5*cos(q3) + 0.333333333333333*cos(q4) + 0.166666666666667*cos(q3 + q4) + 0.555555555555556)*(-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)) + 5.25*cos(q3) + 3.5*cos(q4) + 1.75*cos(q3 + q4) + 5.83333333333333))
    
    invM41 = invM14
    
    invM42 = invM24
    
    invM43 = invM34
    
    invM44 = (-1.0*(-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0) + 1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)) - 1.0*(-1.0*cos(q4) - 1.66666666666667)*(-6.25*(-cos(q2) - 0.6*cos(q2 + q3) - 0.2*cos(q2 + q3 + q4))^2 + 10.5*cos(q3) + 3.5*cos(q4) + 3.5*cos(q3 + q4) + 14.0) + 1.0*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667)*(-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)) + 5.25*cos(q3) + 3.5*cos(q4) + 1.75*cos(q3 + q4) + 5.83333333333333))/((-1.0*(-1.0*cos(q4) - 1.66666666666667)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*cos(q2 + q3 + q4) + 1.75*cos(q4) + 1.75*cos(q3 + q4) + 1.16666666666667) - (0.5*(-1.0*cos(q4) - 1.66666666666667)*cos(q2 + q3 + q4) + 1.0*(-0.5*cos(q4) - 0.333333333333333)*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)))*(1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0)*cos(q2 + q3 + q4)) + (1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667)*cos(q2 + q3 + q4))^2 + (-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-3.0*cos(q3) - 1.0*cos(q4) - 1.0*cos(q3 + q4) - 4.0) + 1.0*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-1.5*cos(q3) - 1.0*cos(q4) - 0.5*cos(q3 + q4) - 1.66666666666667))*(0.5*(-0.5*cos(q4) - 0.333333333333333)*cos(q2 + q3 + q4) + 0.5*cos(q2 + q3) + 0.166666666666667*cos(q2 + q3 + q4)) + (-0.25*(-cos(q4) - 0.666666666666667)^2 + 0.333333333333333*cos(q4) + 0.555555555555556)*(-6.25*(-cos(q2) - 0.6*cos(q2 + q3) - 0.2*cos(q2 + q3 + q4))^2 + 10.5*cos(q3) + 3.5*cos(q4) + 3.5*cos(q3 + q4) + 14.0) - (-1.0*(-0.5*cos(q4) - 0.333333333333333)*(-0.5*cos(q4) - 0.5*cos(q3 + q4) - 0.333333333333333) + 0.5*cos(q3) + 0.333333333333333*cos(q4) + 0.166666666666667*cos(q3 + q4) + 0.555555555555556)*(-1.0*(-1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4))*(-2.5*cos(q2) - 1.5*cos(q2 + q3) - 0.5*cos(q2 + q3 + q4)) + 5.25*cos(q3) + 3.5*cos(q4) + 1.75*cos(q3 + q4) + 5.83333333333333))

    
    invM = [
        invM11 invM12 invM13 invM14
        invM21 invM22 invM23 invM24
        invM31 invM32 invM33 invM34
        invM41 invM42 invM43 invM44
    ]

    B = [
        -2.5*v2^2*sin(q2) - 1.5*v2^2*sin(q2 + q3) - 0.5*v2^2*sin(q2 + q3 + q4) - 3.0*v2*v3*sin(q2 + q3) - 1.0*v2*v3*sin(q2 + q3 + q4) - 1.0*v2*v4*sin(q2 + q3 + q4) - 1.5*v3^2*sin(q2 + q3) - 0.5*v3^2*sin(q2 + q3 + q4) - 1.0*v3*v4*sin(q2 + q3 + q4) - 0.5*v4^2*sin(q2 + q3 + q4)
        -2.5*g*sin(q2) - 1.5*g*sin(q2 + q3) - 0.5*g*sin(q2 + q3 + q4) - 3.0*v2*v3*sin(q3) - 1.0*v2*v3*sin(q3 + q4) - 1.0*v2*v4*sin(q4) - 1.0*v2*v4*sin(q3 + q4) - 1.5*v3^2*sin(q3) - 0.5*v3^2*sin(q3 + q4) - 1.0*v3*v4*sin(q4) - 1.0*v3*v4*sin(q3 + q4) - 0.5*v4^2*sin(q4) - 0.5*v4^2*sin(q3 + q4)
                                                                                                                                               -1.5*g*sin(q2 + q3) - 0.5*g*sin(q2 + q3 + q4) + 1.5*v2^2*sin(q3) + 0.5*v2^2*sin(q3 + q4) - 1.0*v2*v4*sin(q4) - 1.0*v3*v4*sin(q4) - 0.5*v4^2*sin(q4)
                                                                                                                                                                                        -0.5*g*sin(q2 + q3 + q4) + 0.5*v2^2*sin(q4) + 0.5*v2^2*sin(q3 + q4) + 1.0*v2*v3*sin(q4) + 0.5*v3^2*sin(q4)
    ]

    qd = [v1;v2;v3;v4]
    qdd = invM*(F - B)

    return [qd;qdd]
end

RobotDynamics.state_dim(::TripleCartpole) = 8
RobotDynamics.control_dim(::TripleCartpole) = 1

urdf = "cartpole.urdf"
model = TripleCartpole()
n,m = size(model)

dt = 0.01
tf = 10.
N = Int(tf/dt+1)

x0 = @SVector zeros(n)
xf = @SVector [0, pi, 0, 0, 0, 0.0, 0, 0];  # i.e. swing up

# Set up
Q = 1.0*Diagonal(@SVector ones(n))
Qf = 100.0*Diagonal(@SVector ones(n))
R = 1.0e-3*Diagonal(@SVector ones(m))
obj = LQRObjective(Q,R,Qf,xf,N)

# Create Empty ConstraintList
conSet = ConstraintList(n,m,N)

# Control Bounds
# u_bnd = 100.0
# bnd = BoundConstraint(n,m, u_min=-u_bnd, u_max=u_bnd)
# add_constraint!(conSet, bnd, 1:N-1)

# Goal Constraint
goal = GoalConstraint(xf)
add_constraint!(conSet, goal, N)

prob = Problem(model, obj, xf, tf, x0=x0, constraints=conSet)

u0 = @SVector fill(0.01,m)
U0 = [u0 for k = 1:N-1]
# U0 = [U[Int(floor((k-1)*10+1))] for k = 1:1000]
initial_controls!(prob, U0)
rollout!(prob)

using Altro
opts = SolverOptions(
    constraint_tolerance = 1e-15,
    cost_tolerance = 1e-3,
    cost_tolerance_intermediate=1e-1,
    penalty_scaling=10.,
    penalty_initial=10000.0
)
 
altro = ALTROSolver(prob, opts)
solve!(altro)

println("max_violation: ", max_violation(altro))
println("cost:          ", cost(altro))
println("iterations:    ", iterations(altro));

X = states(altro)
U = controls(altro)

hcat(Vector.(X)...)